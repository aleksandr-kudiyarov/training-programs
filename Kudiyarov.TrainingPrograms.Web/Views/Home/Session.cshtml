@using System.Globalization
@using Kudiyarov.Packages.DoubleExtensions
@using Kudiyarov.TrainingPrograms.Entities.Repeats
@model Kudiyarov.TrainingPrograms.Entities.Session

@{
    ViewData["Title"] = "Home Page";
}

<div>
    <div>
        <h3>Session @Model.Day</h3>
        @foreach (var round in Model.Rounds)
        {
            for (var r = 0; r < round.Rounds; r++)
            {
                foreach (var exercise in round.Exercises)
                {
                    <div>
                        <p>@exercise.Name</p>

                        @foreach (var repeat in exercise.Repeats)
                        {
                            var repeats = repeat switch
                            {
                                SingleRepeat singleRepeat => singleRepeat.Repeats.ToString(),
                                MultiRepeat multiRepeat => string.Join("+", multiRepeat.Repeats),
                                StaticRepeat staticRepeat => $"{staticRepeat.Duration.TotalSeconds.ToString(CultureInfo.CurrentCulture)} sec",
                                _ => throw new ArgumentOutOfRangeException()
                                };

                            const double roundFactor = 2.5;
                            var weight = repeat.Weight;
                            var asymmetryWeight = default(double?);

                            if (weight != null)
                            {
                                var isAsymmetry = exercise.Name.Contains("Asymmetry", StringComparison.OrdinalIgnoreCase);
                            
                                if (isAsymmetry)
                                {
                                    asymmetryWeight = weight * 0.85;
                                    asymmetryWeight = asymmetryWeight.Value.RoundTo(roundFactor);
                                }

                                weight = weight.Value.RoundTo(roundFactor);
                            }

                            string repeatDescription;

                            if (weight != null && asymmetryWeight != null)
                            {
                                repeatDescription = $"{weight} ({asymmetryWeight}) × {repeats}";
                            }
                            else if (weight != null)
                            {
                                repeatDescription = $"{weight} × {repeats}";
                            }
                            else
                            {
                                repeatDescription = repeats;
                            }

                            for (var s = 0; s < repeat.Sets; s++)
                            {
                                <p>@repeatDescription</p>
                            }
                        }
                    </div>
                }
            }
        }
    </div>
</div>